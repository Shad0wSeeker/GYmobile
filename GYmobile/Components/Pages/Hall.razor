
@page "/hall/{id}"
@using Blazorise.Extensions
@using Blazored.LocalStorage;
@using Microsoft.Maui.Controls.Maps
@using Microsoft.Maui.Maps
@using System.Diagnostics
@using System.Globalization
@inject ILocalStorageService LocalStorage
@inject CommonService CommonService
@inject NavigationManager NavManager
@inject HttpClient Http


<PageTitle>@(Current?.Name ?? "Зал")</PageTitle>

<div class="main-content">
    @if (Current == null)
    {
        <div class="loading-spinner">
            <span>Загрузка...</span>
        </div>
    }
    else
    {
        <div class="hall-header">
            <h1>@Current.Name</h1>
            <div class="rating-container">
                <span class="rating-label">Рейтинг</span>
                <div class="stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="star @(Current.ReviewCount > 0 && i <= Current.OverallRating ? "filled" : "empty")">★</span>
                    }
                    <span class="rating-value">@Current.OverallRating.ToString("0.00")</span>
                </div>
                <div class="rating-count">оценило: @Current.ReviewCount чел.</div>
            </div>
        </div>

        <div class="hall-content">
            <!-- Галерея изображений -->
            @if (Current.Images != null && Current.Images.Any())
            {
                <div class="gallery">
                    @if (imageUrls.Any())
                    {
                        @if (imageUrls.Any())
                        {                            
                            <img src="@imageUrls.First()" alt="@Current.Name" class="gallery-image" @onclick="() => OpenImageModal(0)" />
                        }
                        @* foreach (var img in imageUrls)
                        {
                            <img src="@imageUrls.First()" alt="@Current.Name" class="gallery-image" @onclick="() => OpenImageModal(img)" />
                            @*  <img src="@img" alt="@Current.Name" class="gallery-image" @onclick="() => OpenImageModal(img)" />  
                        } *@
                    }
                    else
                    {
                        <div class="placeholder-image">Изображение недоступно</div>
                    }
                </div>

                @if (isModalOpen)
                {
                    <div class="modall-overlay" @onclick="CloseImageModal">
                        <span class="modall-close" @onclick="CloseImageModal">&times;</span>

                        <div class="modall-content" @onclick:stopPropagation="true">
                            @if (imageUrls.Count > 1)
                            {
                                <button class="modal-nav left" @onclick="PreviousImage">&#10094;</button>
                            }

                            <img src="@selectedImage" class="modall-image" />

                            @if (imageUrls.Count > 1)
                            {
                                <button class="modall-nav right" @onclick="NextImage">&#10095;</button>
                            }
                        </div>
                    </div>
                }
            }

            <!-- Кнопки действий -->
            <div class="action-buttons">
                <button class="actions" @onclick="NavigateToRent">
                    Арендовать
                </button>
                <button class="actions" @onclick="NavigateToReviews">
                    Отзывы клиентов
                </button>

            </div>
        </div>

        

        <!-- Основной контент -->
        <div class="hall-content">
            

            <!-- Описание -->
            <div class="description-section">
                <h3>Описание</h3>
                <p>@Current.Description</p>
            </div>

            <!-- Цена -->
            <div class="description-section">
                <h3>Цена</h3>
                <p>@Current.Price BYN</p>
            </div>

            <!-- Адрес -->
            <div class="address-section">
                <h3>Адрес</h3>
                <p>@Current.Address, @Current.City</p>
            </div>

            <!-- Карта -->
            @* <div style="width:100%; height:300px; margin:20px 0;"> *@
            <div class="map-container">

                    <iframe width="100%" height="300"
                            src="@GetOpenStreetMapUrl()"
                            frameborder="0"
                            loading="lazy">
                    </iframe>
                    <br />
                    <small>
                        <a href="@GetLargeMapUrl()" target="_blank">Открыть в полном размере</a>
                    </small>                
              
            </div>

           

            <!-- Контакты -->
            <div class="contacts-section">
                <h3>Контактная информация</h3>
                <div class="contact-item">
                    <span>Телефон:</span>
                    <span>@Current.PhoneNumber</span>
                </div>
                <div class="contact-item">
                    <span>Email:</span>
                    <span>@Current.Email</span>
                </div>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private HallDetailsRequestDTO Current { get; set; }
    private bool isLoading = true;
    private List<string> imageUrls = new();
    private Map map;
    private Location pinLocation;

    private int currentImageIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            if (int.TryParse(Id, out int hallId))
            {
                Current = await CommonService.GetHallById(hallId);

                Debug.WriteLine($"Данные загружены: {Current != null}");

                Debug.WriteLine($"Координаты: Lat={Current.Latitude}, Long={Current.Longitude}");
                Debug.WriteLine($"Адрес: {Current.Address}, {Current.City}");

                if (Current.Latitude == 0 && Current.Longitude == 0)
                {
                    Debug.WriteLine("Внимание: получены нулевые координаты!");
                }
                await LoadImages();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Ошибка загрузки: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private string GetOpenStreetMapUrl()
    {
        if (Current == null) return string.Empty;

        double lat = Current.Longitude;
        double lon = Current.Latitude;

        string latStr = lat.ToString(CultureInfo.InvariantCulture);
        string lonStr = lon.ToString(CultureInfo.InvariantCulture);

        return $"https://www.openstreetmap.org/export/embed.html?" +
           $"bbox={lonStr},{latStr},{lonStr},{latStr}" +
           $"&layer=mapnik" +
           $"&marker={latStr},{lonStr}";
    }

    private string GetLargeMapUrl()
    {
        if (Current == null) return "#";   


        double lat = Current.Longitude;
        double lon = Current.Latitude;

        string latStr = lat.ToString(CultureInfo.InvariantCulture);
        string lonStr = lon.ToString(CultureInfo.InvariantCulture);

        return $"https://www.openstreetmap.org/?mlat={latStr}&mlon={lonStr}#map=17/{latStr}/{lonStr}";
    }

    private async Task LoadImages()
    {
        imageUrls.Clear();

        try
        {
            if (Current?.Images != null && Current.Images.Any())
            {
                foreach (var img in Current.Images)
                {
                    if (!string.IsNullOrEmpty(img.ImageUri))
                    {
                        var fullImageUrl = $"http://rentagym.runasp.net/{img.ImageUri}?t={DateTime.Now.Ticks}";
                        var imageBytes = await Http.GetByteArrayAsync(fullImageUrl);
                        var base64 = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
                        imageUrls.Add(base64);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Image load error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task NavigateToRent()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo("/login");
        }
        else
        {
            NavManager.NavigateTo($"/rent/{Id}");
        }
       
    }

    private void NavigateToReviews()
    {
        NavManager.NavigateTo($"/halls/{Id}/feedbacks");
    }



    private bool isModalOpen = false;
    private string selectedImage = string.Empty;

    // private void OpenImageModal(string img)
    // {
    //     selectedImage = img;
    //     isModalOpen = true;
    // }

    private void OpenImageModal(int index)
    {
        if (index >= 0 && index < imageUrls.Count)
        {
            currentImageIndex = index;
            selectedImage = imageUrls[index];
            isModalOpen = true;
        }
    }

    private void CloseImageModal()
    {
        isModalOpen = false;      

    }


    private void NextImage()
    {
        if (imageUrls.Count > 1)
        {
            currentImageIndex = (currentImageIndex + 1) % imageUrls.Count;
            selectedImage = imageUrls[currentImageIndex];
        }
    }

    private void PreviousImage()
    {
        if (imageUrls.Count > 1)
        {
            currentImageIndex = (currentImageIndex - 1 + imageUrls.Count) % imageUrls.Count;
            selectedImage = imageUrls[currentImageIndex];
        }
    }
}