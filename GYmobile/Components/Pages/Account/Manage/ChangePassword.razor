@page "/account/manage/changepassword"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage

@inject CommonService CommonService
@inject ILocalStorageService LocalStorage
@layout ManageLayout

<div class="main-content">
    <h3>Смена пароля</h3>

    <EditForm Model="passwordModel" OnValidSubmit="HandleChangePasswordAsync" class="edit-form">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Текущий пароль</label>
            <InputText class="form-control" type="password" @bind-Value="passwordModel.CurrentPassword" />
            <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Новый пароль</label>
            <InputText class="form-control" type="password" @bind-Value="passwordModel.NewPassword" />
            <ValidationMessage For="@(() => passwordModel.NewPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Подтверждение пароля</label>
            <InputText class="form-control" type="password" @bind-Value="passwordModel.ConfirmPassword" />
            <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary">Сменить пароль</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">
            @statusMessage
        </div>
    }
</div>

@code {

    private ChangePasswordModel passwordModel = new();
    private string? statusMessage;
    private bool isSuccess;

    private async Task HandleChangePasswordAsync()
    {
        if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
        {
            statusMessage = "Новый пароль и подтверждение не совпадают.";
            isSuccess = false;
            return;
        }
        var userId = await LocalStorage.GetItemAsync<string>("userId");

        var request = new ChangePasswordRequest
        {
            UserId = userId,
            OldPassword = passwordModel.CurrentPassword,
            NewPassword = passwordModel.NewPassword,
            ConfirmPassword = passwordModel.ConfirmPassword
        };

        var (success, error) = await CommonService.ChangePasswordAsync(request);
        isSuccess = success;

        statusMessage = success ? "Пароль успешно изменён" : error ?? "Ошибка при смене пароля";
    }

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "Введите текущий пароль")]
        public string? CurrentPassword { get; set; }

        [Required(ErrorMessage = "Введите новый пароль")]
        [MinLength(6, ErrorMessage = "Пароль должен быть не менее 6 символов")]
        public string? NewPassword { get; set; }

        [Required(ErrorMessage = "Подтвердите новый пароль")]
        public string? ConfirmPassword { get; set; }
    }
}
