 @* @page "/"

 @using GYmobile.Components.Common
 @using MediatR

 @inject CommonService CommonService


 <PageTitle>Home</PageTitle>
 <div class="row bg-body-secondary p-2">
     <div class="col-2">
           <TypeSelector @bind-SelectedType="@HallTypeFilter" OnUpdated="@FilterData" /> 
     </div>
 </div>

 <div class="row">
     <!-- Боковая панель -->
     <div class="col-md-3 bg-body-secondary bg-opacity-50">
         <FilterSidePanel @bind-Filter="@Filter" ApplyFilter="FilterData" />
     </div><!-- Боковая панель -->
     <!-- Содержимое страницы -->
     <div class="col-md-9">
         @if (Halls == null)
         {
             <p>Загрузка ...</p>
             <div class="spinner-border text-warning" role="status">
                 <span class="visually-hidden">Загрузка...</span>
             </div>
         }
         else if (!Halls.Any())
         {
             <p>По Вашему запросу ничего не найдено</p>
         }
         else
         {
             @foreach (var data in Halls)
             {
                 <HallComponent Current="data" />
             }
         }
     </div>
 </div>

 @code {
     public HallType HallTypeFilter { get; set; } = new();
     IEnumerable<HallListRequestDTO> Halls { get; set; }
     public HallListFilter Filter { get; set; } = new();

     protected override async Task OnInitializedAsync()
     {
         Halls = await CommonService.GetHallListAsync(new HallListFilter());
     }

     async void FilterData()
     {
         Halls = null;
         Filter.TypeId = HallTypeFilter.Id;
         Halls = await CommonService.GetHallListAsync(Filter);
     }
 }
 *@




 @*LATEST*@

@* 
@page "/"
@using GYmobile.Components.Common
@inject CommonService CommonService

<PageTitle>Главная</PageTitle>

<div class="row bg-body-secondary p-2">
    <div class="col-2">
        <TypeSelector @bind-SelectedType="@HallTypeFilter" OnUpdated="@FilterData" />
    </div>
</div>

<div class="row">
    <!-- Боковая панель -->
    <div class="col-md-3 bg-body-secondary bg-opacity-50">
        <FilterSidePanel @bind-Filter="@Filter" ApplyFilter="FilterData" />
    </div>
    <!-- Содержимое страницы -->
    <div class="col-md-9">
        @if (Halls == null)
        {
            <p>Загрузка ...</p>
            <div class="spinner-border text-warning" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        }
        else if (!Halls.Any())
        {
            <p>По Вашему запросу ничего не найдено</p>
        }
        else
        {
            @foreach (var data in Halls)
            {
                <HallComponent Current="data" />
            }
        }
    </div>
</div>


@code {
    public HallType HallTypeFilter { get; set; } = new();
    IEnumerable<HallListRequestDTO> Halls { get; set; }
    public HallListFilter Filter { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Halls = await CommonService.GetHallListAsync(new HallListFilter());
    }

    async void FilterData()
    {
        Halls = null;
        Filter.TypeId = HallTypeFilter.Id;
        Halls = await CommonService.GetHallListAsync(Filter);
    }
}  *@








@page "/"
@using GYmobile.Components.Common
@inject CommonService CommonService

<PageTitle>Главная</PageTitle>

<div class="main-content">
    <!-- Фильтры -->
   
    <div class="filters">
        <div class="row bg-body-secondary p-2">
            <div class="col-12">
                <!-- Кнопка для открытия/закрытия фильтров -->
                <button class="custom-filter-button" @onclick="ToggleFilters">
                    Тип <Icon Class="ms-2" Name="IconName.ChevronDown" />
                </button>
            </div>
        </div>

        <!-- Секция с фильтрами (скрыта по умолчанию) -->
        @if (showFilters)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5>Выберите тип помещения</h5>
                        <button class="close-button" @onclick="ToggleFilters">×</button>
                    </div>
                    <div class="modal-body">
                        <TypeSelector @bind-SelectedType="@HallTypeFilter" OnUpdated="@FilterData" />
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="ToggleFilters">Закрыть</button>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row">
        <!-- Боковая панель -->
        <div class="col-md-3 bg-body-secondary bg-opacity-50">
            <FilterSidePanel @bind-Filter="@Filter" ApplyFilter="FilterData" />
        </div>
        <!-- Содержимое страницы -->
        <div>
            @if (Halls == null)
            {
                <p>Загрузка ...</p>
                <div class="spinner-border text-warning" role="status">
                    <span class="visually-hidden">Загрузка...</span>
                </div>
            }
            else if (!Halls.Any())
            {
                <p>По Вашему запросу ничего не найдено</p>
            }
            else
            {
                @foreach (var data in Halls)
                {
                    <div class="hall-item">
                        <HallComponent Current="data" />
                    </div>
                }
            }
        </div>
    </div>
</div>

<BottomNav />

@code {
    public HallType HallTypeFilter { get; set; } = new();
    IEnumerable<HallListRequestDTO> Halls { get; set; }
    public HallListFilter Filter { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Halls = await CommonService.GetHallListAsync(new HallListFilter());
    }

    async void FilterData()
    {
        Halls = null;
        Filter.TypeId = HallTypeFilter.Id;
        Halls = await CommonService.GetHallListAsync(Filter);
    }

    private bool showFilters = false; // Состояние для отображения/скрытия фильтров

    private void ToggleFilters()
    {
        showFilters = !showFilters; // Переключение состояния фильтров
    }
} 
