@page "/client_records"
@using Blazored.LocalStorage
@using System.Text.Json
@using System.Diagnostics
@using Newtonsoft.Json


@inject LandlordService LandlordService
@inject IAuthenticationService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="main-content">
    <h3>Записи клиентов</h3>
    <div class="client-records-main">
        <div class="chkbox-story">
            <p class="archive-state">Архивные</p>
            <label class="switch">
                <input @bind-value="IsActive" type="checkbox" checked>
                <span class="slider round"></span>
            </label>
            <p class="active-state">Активные</p>
        </div>
        @if (IsActive)
        {
            if (currentStory == null || !currentStory.Any())
            {
                <p>Активные записи отсутствуют</p>
            }
            @foreach (var schedule in currentStory!)
            {
                <div class="record-list-component">
                    <div class="name-with-img">
                        <p>@schedule.HallName</p>
                        <img class="hall-img" src="@GetImageUrl(schedule.HallId)" />
                    </div>
                    <div class="info-column">
                        <div class="info-row"><strong>Дата от:</strong>&nbsp;@schedule.DateFrom.ToShortDateString()</div>
                        <div class="info-row"><strong>Дата до:</strong>&nbsp;@schedule.DateTo.ToShortDateString()</div>
                        <div class="info-row"><strong>Время от:</strong>&nbsp;@schedule.DateFrom.ToShortTimeString()</div>
                        <div class="info-row"><strong>Время до:</strong>&nbsp;@schedule.DateTo.ToShortTimeString()</div>
                        <div class="info-row"><strong>Арендатор:</strong>&nbsp;@schedule.TenantName</div>
                    </div>
                    <a href="/chat/@schedule.RentBorderId" class="a-link-chat">Чат</a>
                </div>
            }
        }
        else
        {
            if (archiveStory.Count() == 0 || archiveStory == null)
            {
                <p>Архивные записи отсутствуют</p>
            }
            @foreach (var schedule in archiveStory!)
            {
                <div class="record-list-component">
                    <div class="name-with-img">
                        <p>@schedule.HallName</p>
                        <img class="hall-img" src="@GetImageUrl(schedule.HallId)" />
                    </div>
                    <div class="info-column">
                        <div class="info-row"><strong>Дата от:</strong>&nbsp;@schedule.DateFrom.ToShortDateString()</div>
                        <div class="info-row"><strong>Дата до:</strong>&nbsp;@schedule.DateTo.ToShortDateString()</div>
                        <div class="info-row"><strong>Время от:</strong>&nbsp;@schedule.DateFrom.ToShortTimeString()</div>
                        <div class="info-row"><strong>Время до:</strong>&nbsp;@schedule.DateTo.ToShortTimeString()</div>
                        <div class="info-row"><strong>Арендатор:</strong>&nbsp;@schedule.TenantName</div>
                    </div>
                    
                    <a href="/chat/@schedule.RentBorderId" class="a-link-chat">Чат</a>
                </div>
            }
        }
    </div>
</div>

@code {

    private List<RentDTO> currentStory = new();
    private List<RentDTO> archiveStory = new();
    private bool IsActive = true;
    private bool isLoading = true;
    private string? errorMessage;
    private bool isAuthenticated = false;

    private Dictionary<int, string> imageUrls = new();

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        if (string.IsNullOrEmpty(token))
        {
            isAuthenticated = false;
            isLoading = false;
            return;
        }

        try
        {
            var landlordId = await LocalStorage.GetItemAsync<string>("userId");
            if (string.IsNullOrEmpty(landlordId))
            {
                errorMessage = "Не удалось получить ID пользователя";
                isLoading = false;
                return;
            }

            var rentsJson = await LandlordService.GetHallRentsAsync(landlordId);

            var schedules = JsonConvert.DeserializeObject<List<RentDTO>>(rentsJson);

            if (schedules != null)
            {
                currentStory = schedules.Where(x => !x.IsDone).ToList();
                archiveStory = schedules.Where(x => x.IsDone).ToList();

                await LoadImagesAsync(schedules);
            }
            isAuthenticated = true;



        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке данных: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task LoadImagesAsync(List<RentDTO> schedules)
    {
        foreach (var rent in schedules)
        {
            if (rent.PreviewImage != null && !string.IsNullOrEmpty(rent.PreviewImage.ImageUri))
            {
                try
                {
                    var fullImageUrl = $"http://rentagym.runasp.net/{rent.PreviewImage.ImageUri}?t={DateTime.Now.Ticks}";
                    var bytes = await Http.GetByteArrayAsync(fullImageUrl);
                    var base64 = Convert.ToBase64String(bytes);
                    imageUrls[rent.HallId] = $"data:image/jpeg;base64,{base64}";
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Ошибка загрузки изображения для зала {rent.HallId}: {ex.Message}");
                    imageUrls[rent.HallId] = "placeholder.png"; // или путь к локальной заглушке
                }
            }
        }

        StateHasChanged();
    }

    

    private string GetImageUrl(int hallId)
    {
        if (imageUrls.TryGetValue(hallId, out var url))
            return url;

        return "placeholder.png"; // путь по умолчанию
    }

}
