@page "/rent/{id}"
@using Blazored.LocalStorage
@using Newtonsoft.Json
@inject TenantService TenantService
@inject NavigationManager Navigation
@inject CommonService CommonService
@inject ILocalStorageService LocalStorage
@inject Blazored.Toast.Services.IToastService ToastService
@using System.Diagnostics


<div class="main-content">
    <div class="form-container">

        <!-- Календарь -->
        <div class="calendar-container">
            <label class="calendar-label">Выберите даты аренды:</label>
            <div class="calendar-wrapper">
                @foreach (var day in visibleDays)
                {
                    <div class="day-cell @GetDayCellClass(day)" @onclick="() => SelectDay(day)">
                        <div class="day-number">@day.Day</div>
                        <div class="day-name">@day.ToString("ddd")</div>
                    </div>
                }
            </div>
            <div class="calendar-nav">
                <button @onclick="PrevMonth" class="nav-button">&lt;</button>
                <span class="month-title">@currentMonth.ToString("MMMM yyyy")</span>
                <button @onclick="NextMonth" class="nav-button">&gt;</button>
            </div>
        </div>

        <!-- Выбранные даты -->
        @if (selectedDays.Any())
        {
            <div class="selected-dates">
                <span>Выбрано: @string.Join(", ", selectedDays.OrderBy(d => d).Select(d => d.ToString("dd.MM.yyyy")))</span>
                <button @onclick="ClearSelection" class="clear-button">Очистить</button>
            </div>
        }

        <!-- Выбор времени -->
        <div class="time-selection">
            <div class="time-group">
                <label>Время начала:</label>
                <select @bind="selectedTimeFrom" class="time-select">
                    <option value="">Выберите время</option>
                    @foreach (var time in availableTimesFrom)
                    {
                        <option value="@time">@time.ToString("HH:mm")</option>
                    }
                </select>
            </div>
        </div>
        <div class="time-selection">
            <div class="time-group">
                <label>Время окончания:</label>
                <select @bind="selectedTimeTo" class="time-select">
                    <option value="">Выберите время</option>
                    @foreach (var time in availableTimesTo)
                    {
                        <option value="@time">@time.ToString("HH:mm")</option>
                    }
                </select>
            </div>
        </div>

        <!-- Еженедельная подписка -->
        <div class="week-block">
            <input type="checkbox" id="weeklyRent" @bind="weekRent" />
            <label for="weeklyRent">Еженедельная подписка</label>
            <div class="custom-tooltip-wrapper">
                <div class="custom-tooltip-icon" @onclick="() => showTooltip = !showTooltip">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 18 18">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                        <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286m1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94" />
                    </svg>
                </div>
                @if (showTooltip)
                {
                    <div class="tooltip-box">
                        Например, вы выбрали бронь: Понедельник, с 10:00 до 12:00. Активация данного пункта будет продлевать вашу бронь на каждый понедельник с 10:00 до 12:00. Не выбирайте, если не уверены. Это поле не обязательно.
                    </div>
                }
            </div>
        </div>

        <!-- Кнопки -->
        <div class="btns">
            <button class="primary-btn" @onclick="SendRentAsync">Отправить</button>
            <button class="secondary-btn" @onclick="ResetForm">Сброс</button>
        </div>

    </div>
</div>

@code {
    [Parameter] public string id { get; set; }
    private bool showTooltip = false;
    private DateTime currentMonth = DateTime.Today;
    private List<DateTime> visibleDays = new();
    private HashSet<DateTime> selectedDays = new();
    private IEnumerable<DateTime> disabledDays = new List<DateTime>();
    private TimeOnly? selectedTimeFrom;
    private TimeOnly? selectedTimeTo;
    private List<TimeOnly> availableTimesFrom = new();
    private List<TimeOnly> availableTimesTo = new();
    private bool weekRent = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDisabledDates();
        GenerateCalendar();
    }

    private async Task LoadDisabledDates()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        var nextMonth = today.AddMonths(1);

        var jsonDays1 = await CommonService.GetMonthSchedule(int.Parse(id), today);
        var jsonDays2 = await CommonService.GetMonthSchedule(int.Parse(id), nextMonth);

        var days1 = JsonConvert.DeserializeObject<List<string>>(jsonDays1) ?? new List<string>();
        var days2 = JsonConvert.DeserializeObject<List<string>>(jsonDays2) ?? new List<string>();

        disabledDays = days1.Concat(days2)
                          .Select(d => DateTime.Parse(d))
                          .Where(d => d >= DateTime.Today);
    }

    private void GenerateCalendar()
    {
        visibleDays.Clear();

        var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        // Добавляем дни из предыдущего месяца для заполнения первой недели
        int daysFromPrevMonth = (int)firstDayOfMonth.DayOfWeek - 1;
        if (daysFromPrevMonth < 0) daysFromPrevMonth = 6; // Для воскресенья

        for (int i = daysFromPrevMonth; i > 0; i--)
        {
            var day = firstDayOfMonth.AddDays(-i);
            visibleDays.Add(day);
        }

        // Добавляем дни текущего месяца
        for (var day = firstDayOfMonth; day <= lastDayOfMonth; day = day.AddDays(1))
        {
            visibleDays.Add(day);
        }

        // Добавляем дни следующего месяца для заполнения последней недели
        int daysFromNextMonth = 7 - (int)lastDayOfMonth.DayOfWeek;
        for (int i = 1; i <= daysFromNextMonth; i++)
        {
            visibleDays.Add(lastDayOfMonth.AddDays(i));
        }
    }

    private string GetDayCellClass(DateTime day)
    {
        var classes = new List<string>();

        if (day.Month != currentMonth.Month)
            classes.Add("other-month");

        if (day.Date < DateTime.Today)
            classes.Add("past-day"); // Добавляем класс для прошедших дней

        if (disabledDays.Any(d => d.Date == day.Date))
            classes.Add("disabled");

        if (selectedDays.Contains(day.Date))
            classes.Add("selected");

        if (day.Date == DateTime.Today)
            classes.Add("today");

        return string.Join(" ", classes);
    }

    private void SelectDay(DateTime day)
    {
        if (day.Month != currentMonth.Month || disabledDays.Contains(day) || day.Date < DateTime.Today)
            return;

        if (selectedDays.Contains(day))
        {
            selectedDays.Remove(day);
        }
        else
        {
            selectedDays.Add(day);
        }

        if (selectedDays.Count > 0)
        {
            LoadTimes();
        }
        else
        {
            availableTimesFrom.Clear();
            availableTimesTo.Clear();
        }
    }

    private void PrevMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        GenerateCalendar();
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        GenerateCalendar();
    }

    private void ClearSelection()
    {
        selectedDays.Clear();
        availableTimesFrom.Clear();
        availableTimesTo.Clear();
        selectedTimeFrom = null;
        selectedTimeTo = null;
    }

    private async Task LoadTimes()
    {
        if (selectedDays.Any())
        {
            availableTimesFrom.Clear();
            availableTimesTo.Clear();

            var firstDate = DateOnly.FromDateTime(selectedDays.Min());
            var lastDate = DateOnly.FromDateTime(selectedDays.Max());

            var timeFrom = await CommonService.GetDaySchedule(int.Parse(id), firstDate);
            var timeTo = await CommonService.GetDaySchedule(int.Parse(id), lastDate);

            // Преобразуем строки "HH:mm:ss" в TimeOnly
            var busyTimesFrom = timeFrom.Select(t => TimeOnly.Parse(t)).ToList();
            var busyTimesTo = timeTo.Select(t => TimeOnly.Parse(t)).ToList();

            // Генерируем список всех возможных часов (например, с 8:00 до 23:00)
            var allPossibleHours = Enumerable.Range(8, 16) // с 8:00 до 23:00
                .Select(h => new TimeOnly(h, 0))
                .ToList();

            // Доступное время = все возможные часы минус занятые
            availableTimesFrom = allPossibleHours
                .Where(t => !busyTimesFrom.Contains(t))
                .ToList();

            availableTimesTo = allPossibleHours
                .Where(t => !busyTimesTo.Contains(t))
                .ToList();

            StateHasChanged();
        }
    }

    private async Task SendRentAsync()
    {
        try
        {
            if (!selectedDays.Any() || selectedTimeFrom == null || selectedTimeTo == null)
            {
                ToastService.ShowWarning("Пожалуйста, выберите даты и время");
                return;
            }

            var firstDate = selectedDays.Min();
            var lastDate = selectedDays.Max();

            var from = new DateTime(firstDate.Year, firstDate.Month, firstDate.Day,
                                  selectedTimeFrom.Value.Hour, 0, 0);

            var to = new DateTime(lastDate.Year, lastDate.Month, lastDate.Day,
                                 selectedTimeTo.Value.Hour, 0, 0);

            var formatedFrom = from.ToString("yyyy-MM-ddTHH:mm:ss");
            var formatedTo = to.ToString("yyyy-MM-ddTHH:mm:ss");

            var userId = await LocalStorage.GetItemAsync<string>("userId");
            Debug.WriteLine($"userId: {userId}, hallId: {id}, isRegular: {weekRent}, timeFrom: {formatedFrom}, timeTo: {formatedTo}");

            var success = await TenantService.RegisterRentAsync(userId, int.Parse(id), weekRent, formatedFrom, formatedTo);
            Debug.WriteLine($"success url: {success}");
            if (success)
            {
                ToastService.ShowSuccess("Успешно!");
                Navigation.NavigateTo("/profile");
            }
            else
            {
                ToastService.ShowError("Что-то пошло не так... Попробуйте выбрать день/время ещё раз");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Ошибка при бронировании: {ex}");
        }
    }

    private void ResetForm()
    {
        selectedDays.Clear();
        availableTimesFrom.Clear();
        availableTimesTo.Clear();
        selectedTimeFrom = null;
        selectedTimeTo = null;
        weekRent = false;
        currentMonth = DateTime.Today;
        GenerateCalendar();
    }
}

