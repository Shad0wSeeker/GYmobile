@using GYmobile.Dto
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="hall-card">
    <div class="hall-image">
       @if (imageUrl != null)
        {
            <img src="@imageUrl" alt="@Current.Name" />
        }
        else
        {
            <div class="placeholder-image">Изображение недоступно</div>
        }
    </div>
    <div class="hall-details">
        <h3>@Current.Name</h3>
        <p>@Current.Description</p>
        <div class="hall-header">
            <div class="rating-container">
                <span class="rating-label">Рейтинг</span>
                <div class="stars">
                    @for (int i = 1; i <= 5; i++)

                    {
                        <span class="star @(Current.OverallRating > 0 && i <= Current.OverallRating ? "filled" : "empty")">★</span>
                    }
                    <span class="rating-value-black">@Current.OverallRating.ToString("0.00")</span>
                </div>               
            </div>
        </div>
    </div>
    <div class="hall-price">
        <h4>от @Current.Price BYN</h4>
        <a @onclick="NavigateToHall">Подробнее</a>
    </div>
</div>

@code {

    [Parameter]

    public HallListRequestDTO Current { get; set; } = new();

    private string imageUrl;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadImage();
    }

    private async Task LoadImage()
    {
        try
        {
            if (Current?.Id > 0 && !string.IsNullOrEmpty(Current.Thumbnail?.ImageUri))
            {
                Debug.WriteLine($"Loading image from: {Current.Thumbnail.ImageUri}");
            
                var fullImageUrl = $"http://rentagym.runasp.net/{Current.Thumbnail.ImageUri}";
            
                // Добавляем временный параметр для избежания кеширования
                fullImageUrl += $"?t={DateTime.Now.Ticks}";
            
                // Скачиваем изображение как массив байтов
                var imageBytes = await Http.GetByteArrayAsync(fullImageUrl);
            
                // Конвертируем в Base64
                imageUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
            
                Debug.WriteLine("Image loaded successfully");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Image load error: {ex.Message}");
            imageUrl = "placeholder_image.png";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    void NavigateToHall()
    {
        NavigationManager.NavigateTo($"/hall/{Current.Id}");
    }

}