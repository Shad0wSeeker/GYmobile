
@inject CommonService CommonService

@page "/filters"
@inject CommonService CommonService

<div>
    <div class="filters-header">
        <span class="filters-title">Фильтры</span>
    </div>

    <div class="filters-body">
        <div class="filter-section">
            <label class="filter-label">Цена</label>
            <div class="filter-input-group">
                <input type="number" class="filter-input" placeholder="От" @bind="FilterData.PriceFrom" />
                <input type="number" class="filter-input" placeholder="До" @bind="FilterData.PriceTo" />
            </div>
        </div>

        <div class="filter-section">
            <label class="filter-label">Площадь</label>
            <div class="filter-input-group">
                <input type="number" class="filter-input" placeholder="От" @bind="FilterData.SquareFrom" />
                <input type="number" class="filter-input" placeholder="До" @bind="FilterData.SquareTo" />
            </div>
        </div>

        <div class="filter-section">            
            <div class="filter-options">
                @foreach (var option in Options)

                {
                    <div class="filter-option">
                        <label for="option-@option.Id">@option.Name</label>
                        <input type="checkbox" id="option-@option.Id" @bind="checks[option.Id]" />                       
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="filters-footer">
        <button class="apply-button" @onclick="OnSubmit">Применить</button>
    </div>
</div>

@code {
    public HallListFilter FilterData { get; set; } = new HallListFilter();

    [Parameter]
    public HallListFilter Filter { get; set; } = new HallListFilter();

    [Parameter]
    public EventCallback<HallListFilter> FilterChanged { get; set; }

    private IEnumerable<Option> Options { get; set; } = new List<Option>();
    private Dictionary<int, bool> checks = new();

    [Parameter]
    public EventCallback ApplyFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Options = await CommonService.GetOptionsAsync();
        checks = Options.ToDictionary(o => o.Id, o => false);
    }

    private async Task OnSubmit()
    {
        FilterData.OptionIds = checks.Where(c => c.Value).Select(c => c.Key).ToList();
        Filter = FilterData;

        await FilterChanged.InvokeAsync(Filter);
        await ApplyFilter.InvokeAsync();
    }
}